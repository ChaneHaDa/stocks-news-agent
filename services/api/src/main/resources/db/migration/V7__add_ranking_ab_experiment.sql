-- V7: Add Ranking A/B Test Experiment Configuration
-- Sets up the primary ranking experiment: control vs personalized

-- Insert ranking A/B test experiment
INSERT INTO experiment (
    experiment_key,
    name,
    description,
    variants,
    traffic_allocation,
    start_date,
    end_date,
    is_active,
    auto_stop_enabled,
    auto_stop_threshold,
    minimum_sample_size,
    created_by
) VALUES (
    'ranking_ab',
    'Ranking Algorithm A/B Test',
    'Test personalized ranking algorithm vs control (standard ranking)',
    '["control", "treatment"]',
    '{"control": 50, "treatment": 50}',
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP + INTERVAL '30' DAY,  -- 30-day experiment
    false,  -- Start disabled, enable via feature flag
    true,   -- Enable auto-stop on poor performance
    -0.05,  -- Auto-stop if CTR drops 5% or more
    5000,   -- Minimum 5k impressions per variant
    'system'
);

-- Update feature flag to enable ranking A/B test
UPDATE feature_flag 
SET flag_value = 'true', updated_at = CURRENT_TIMESTAMP, updated_by = 'system'
WHERE flag_key = 'experiment.rank_ab.enabled';

-- Add new feature flags for F2 A/B testing
INSERT INTO feature_flag (flag_key, name, description, category, value_type, flag_value, default_value, created_by) VALUES
('experiment.ranking_ab.traffic_percentage', 'EXPERIMENT RANKING AB TRAFFIC PERCENTAGE', 'Percentage of users included in ranking A/B test', 'experiment', 'integer', '100', '100', 'system'),
('experiment.ranking_ab.auto_stop.enabled', 'EXPERIMENT RANKING AB AUTO STOP ENABLED', 'Enable automatic experiment stopping on poor performance', 'experiment', 'boolean', 'true', 'true', 'system'),
('experiment.ranking_ab.logging.detailed', 'EXPERIMENT RANKING AB LOGGING DETAILED', 'Enable detailed logging for A/B test analysis', 'experiment', 'boolean', 'true', 'true', 'system'),
('analytics.ctr_calculation.window_hours', 'ANALYTICS CTR CALCULATION WINDOW HOURS', 'Time window for CTR calculation in hours', 'analytics', 'integer', '24', '24', 'system'),
('analytics.auto_stop.check_interval_minutes', 'ANALYTICS AUTO STOP CHECK INTERVAL MINUTES', 'Interval for checking auto-stop conditions in minutes', 'analytics', 'integer', '60', '60', 'system');

-- Create experiment assignment tracking table (optional, for debugging)
CREATE TABLE experiment_assignment (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    anon_id VARCHAR(36) NOT NULL,
    experiment_key VARCHAR(100) NOT NULL,
    variant VARCHAR(50) NOT NULL,
    bucket INTEGER NOT NULL,
    experiment_id BIGINT,
    assigned_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_experiment_assignment_experiment FOREIGN KEY (experiment_id) REFERENCES experiment(id),
    CONSTRAINT uk_experiment_assignment_anon_exp UNIQUE (anon_id, experiment_key)
);

CREATE INDEX idx_experiment_assignment_anon_id ON experiment_assignment(anon_id);
CREATE INDEX idx_experiment_assignment_experiment ON experiment_assignment(experiment_key, variant);
CREATE INDEX idx_experiment_assignment_assigned_at ON experiment_assignment(assigned_at);

-- Create experiment metrics aggregation table
CREATE TABLE experiment_metrics_daily (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    experiment_key VARCHAR(100) NOT NULL,
    variant VARCHAR(50) NOT NULL,
    date_partition VARCHAR(10) NOT NULL, -- YYYY-MM-DD
    
    -- Core metrics
    impressions BIGINT DEFAULT 0,
    clicks BIGINT DEFAULT 0,
    unique_users BIGINT DEFAULT 0,
    
    -- Calculated metrics
    ctr DOUBLE PRECISION DEFAULT 0.0,
    avg_dwell_time_ms DOUBLE PRECISION DEFAULT 0.0,
    avg_position DOUBLE PRECISION DEFAULT 0.0,
    
    -- Advanced metrics
    hide_rate DOUBLE PRECISION DEFAULT 0.0,
    diversity_score DOUBLE PRECISION DEFAULT 0.0,
    personalization_score DOUBLE PRECISION DEFAULT 0.0,
    
    -- Metadata
    calculated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    is_final BOOLEAN DEFAULT FALSE,
    
    CONSTRAINT uk_experiment_metrics_daily UNIQUE (experiment_key, variant, date_partition)
);

CREATE INDEX idx_experiment_metrics_daily_key_variant ON experiment_metrics_daily(experiment_key, variant);
CREATE INDEX idx_experiment_metrics_daily_date ON experiment_metrics_daily(date_partition);
CREATE INDEX idx_experiment_metrics_daily_calculated ON experiment_metrics_daily(calculated_at);

-- Create experiment alerts table for auto-stop monitoring
CREATE TABLE experiment_alert (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    experiment_key VARCHAR(100) NOT NULL,
    alert_type VARCHAR(50) NOT NULL, -- 'auto_stop', 'sample_size', 'performance'
    severity VARCHAR(20) NOT NULL,   -- 'info', 'warning', 'critical'
    message VARCHAR(1000) NOT NULL,
    metrics_data VARCHAR(2000),      -- JSON with relevant metrics
    triggered_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    resolved_at TIMESTAMP WITH TIME ZONE,
    is_resolved BOOLEAN DEFAULT FALSE,
    action_taken VARCHAR(500),
    
    CONSTRAINT uk_experiment_alert_key_type_triggered UNIQUE (experiment_key, alert_type, triggered_at)
);

CREATE INDEX idx_experiment_alert_experiment ON experiment_alert(experiment_key);
CREATE INDEX idx_experiment_alert_type ON experiment_alert(alert_type);
CREATE INDEX idx_experiment_alert_triggered ON experiment_alert(triggered_at);
CREATE INDEX idx_experiment_alert_resolved ON experiment_alert(is_resolved);