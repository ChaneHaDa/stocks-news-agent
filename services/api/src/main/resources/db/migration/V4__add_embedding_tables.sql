-- M3: Add embedding and personalization tables

-- News embedding storage table
CREATE TABLE news_embedding (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    news_id BIGINT NOT NULL,
    vector TEXT NOT NULL, -- JSON array of floats
    dimension INTEGER NOT NULL,
    model_version VARCHAR(50),
    l2_norm DOUBLE PRECISION,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE,
    
    CONSTRAINT fk_news_embedding_news FOREIGN KEY (news_id) REFERENCES news(id) ON DELETE CASCADE,
    CONSTRAINT uk_news_embedding_news_id UNIQUE (news_id)
);

-- Topic clustering and grouping table
CREATE TABLE news_topic (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    news_id BIGINT NOT NULL,
    topic_id VARCHAR(100) NOT NULL,
    group_id VARCHAR(100), -- For duplicate news grouping
    topic_keywords VARCHAR(500), -- JSON array of topic keywords
    similarity_score DOUBLE PRECISION,
    clustering_method VARCHAR(50) DEFAULT 'hdbscan',
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE,
    
    CONSTRAINT fk_news_topic_news FOREIGN KEY (news_id) REFERENCES news(id) ON DELETE CASCADE,
    CONSTRAINT uk_news_topic_news_id UNIQUE (news_id)
);

-- User preferences for personalization
CREATE TABLE user_preference (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id VARCHAR(100) NOT NULL,
    interested_tickers VARCHAR(1000), -- JSON array of ticker codes
    interested_keywords VARCHAR(1000), -- JSON array of keywords
    diversity_weight DOUBLE PRECISION DEFAULT 0.7,
    personalization_enabled BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE,
    
    CONSTRAINT uk_user_preference_user_id UNIQUE (user_id)
);

-- Click tracking for personalization learning
CREATE TABLE click_log (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id VARCHAR(100) NOT NULL,
    news_id BIGINT NOT NULL,
    clicked_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    session_id VARCHAR(100),
    user_agent VARCHAR(500),
    ip_address VARCHAR(45),
    rank_position INTEGER,
    importance_score DOUBLE PRECISION,
    
    CONSTRAINT fk_click_log_news FOREIGN KEY (news_id) REFERENCES news(id) ON DELETE CASCADE
);

-- Indexes for performance
CREATE INDEX idx_news_embedding_news_id ON news_embedding(news_id);
CREATE INDEX idx_news_embedding_dimension ON news_embedding(dimension);
CREATE INDEX idx_news_embedding_model ON news_embedding(model_version);

CREATE INDEX idx_news_topic_news_id ON news_topic(news_id);
CREATE INDEX idx_news_topic_topic_id ON news_topic(topic_id);
CREATE INDEX idx_news_topic_group_id ON news_topic(group_id);

CREATE INDEX idx_user_preference_user_id ON user_preference(user_id);
CREATE INDEX idx_user_preference_active ON user_preference(is_active);

CREATE INDEX idx_click_log_user_id ON click_log(user_id);
CREATE INDEX idx_click_log_news_id ON click_log(news_id);
CREATE INDEX idx_click_log_clicked_at ON click_log(clicked_at);

-- Update the view to include new fields
DROP VIEW IF EXISTS news_with_score;
CREATE VIEW news_with_score AS 
SELECT 
    n.id, n.source, n.url, n.published_at, n.title, n.body, n.dedup_key, n.lang, n.created_at,
    ns.importance, ns.reason_json, ns.rank_score, ns.importance_p, ns.model_version, ns.summary,
    ns.updated_at as score_updated_at,
    nt.topic_id, nt.group_id, nt.topic_keywords,
    ne.dimension as embedding_dimension, ne.model_version as embedding_model_version
FROM news n
LEFT JOIN news_score ns ON n.id = ns.news_id
LEFT JOIN news_topic nt ON n.id = nt.news_id
LEFT JOIN news_embedding ne ON n.id = ne.news_id;