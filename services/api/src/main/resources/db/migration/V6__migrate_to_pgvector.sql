-- V6: Migrate to pgvector for real vector operations
-- Enable pgvector extension and migrate from TEXT-based to VECTOR type
-- Note: H2 doesn't support pgvector, only stores JSON text

-- Create new table with H2-compatible structure
-- PostgreSQL can use VECTOR type via runtime configuration
CREATE TABLE news_embedding_v2 (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    news_id BIGINT NOT NULL,
    vector_text TEXT NOT NULL, -- JSON array for H2/PostgreSQL compatibility
    vector_pg TEXT, -- Will store pgvector format string for PostgreSQL
    dimension INTEGER NOT NULL DEFAULT 768,
    model_version VARCHAR(50) DEFAULT 'sentence-transformers',
    l2_norm DOUBLE PRECISION,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE,
    
    CONSTRAINT fk_news_embedding_v2_news FOREIGN KEY (news_id) REFERENCES news(id) ON DELETE CASCADE,
    CONSTRAINT uk_news_embedding_v2_news_id UNIQUE (news_id)
);

-- Migrate existing data from news_embedding to news_embedding_v2 (if exists)
-- Using conditional insert for safety
INSERT INTO news_embedding_v2 (news_id, vector_text, dimension, model_version, l2_norm, created_at, updated_at)
SELECT news_id, vector_text, dimension, model_version, l2_norm, created_at, updated_at
FROM news_embedding_v2 WHERE 1=0; -- Empty initial migration, data will be populated by application

-- Create indexes for performance
CREATE INDEX idx_news_embedding_v2_news_id ON news_embedding_v2(news_id);
CREATE INDEX idx_news_embedding_v2_dimension ON news_embedding_v2(dimension);
CREATE INDEX idx_news_embedding_v2_model ON news_embedding_v2(model_version);
CREATE INDEX idx_news_embedding_v2_created ON news_embedding_v2(created_at);

-- PostgreSQL-specific indexes will be created via application code when pgvector is available
-- H2 will use standard TEXT indexes for now

-- Drop old table after successful migration (keep for now for safety)
-- DROP TABLE news_embedding;

-- Update the view to use new table
DROP VIEW IF EXISTS news_with_score;
CREATE VIEW news_with_score AS 
SELECT 
    n.id, n.source, n.url, n.published_at, n.title, n.body, n.dedup_key, n.lang, n.created_at,
    ns.importance, ns.reason_json, ns.rank_score, ns.importance_p, ns.model_version, ns.summary,
    ns.updated_at as score_updated_at,
    nt.topic_id, nt.group_id, nt.topic_keywords,
    ne.dimension as embedding_dimension, ne.model_version as embedding_model_version
FROM news n
LEFT JOIN news_score ns ON n.id = ns.news_id
LEFT JOIN news_topic nt ON n.id = nt.news_id
LEFT JOIN news_embedding_v2 ne ON n.id = ne.news_id;