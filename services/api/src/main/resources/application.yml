server:
  port: 8000

spring:
  application:
    name: news-agent-api
  profiles:
    include: resilience
  
  # Database Configuration
  datasource:
    url: ${DATABASE_URL:jdbc:h2:mem:testdb}
    username: ${DATABASE_USERNAME:sa}
    password: ${DATABASE_PASSWORD:}
    driver-class-name: ${DATABASE_DRIVER:org.h2.Driver}
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        jdbc:
          time_zone: UTC
        format_sql: true
    show-sql: ${JPA_SHOW_SQL:false}
  
  # Jackson Configuration
  jackson:
    serialization:
      write-dates-as-timestamps: false
    default-property-inclusion: non_null
  
  # Flyway Configuration
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
  
  # H2 Console (for development)
  h2:
    console:
      enabled: true
      path: /h2-console

# Application Configuration
app:
  rss:
    sources:
      - name: "Yonhap Economy"
        url: "https://www.yna.co.kr/rss/economy.xml"
        weight: 1.0
        enabled: true
      - name: "Maeil Economy"
        url: "https://www.mk.co.kr/rss/30100041/"
        weight: 0.9
        enabled: true
      - name: "Hankyung"
        url: "https://www.hankyung.com/feed/finance"
        weight: 0.8
        enabled: true
    
    # RSS Collection Settings
    collection:
      enabled: ${RSS_COLLECTION_ENABLED:true}
      batch-size: 50
      timeout-seconds: 30
      retry-attempts: 3
      retry-delay-seconds: 5
  
  scoring:
    # Importance scoring weights
    freshness:
      hours-3: 1.0
      hours-24: 0.5
      hours-72: 0.2
    
    # Keyword matching
    keywords:
      high-impact: ["실적", "배당", "증자", "합병", "IPO", "상장", "코스피", "코스닥"]
      medium-impact: ["투자", "수익", "매출", "영업이익", "순이익"]
      
    # Stock ticker patterns
    tickers:
      pattern: "\\d{6}"
      aliases-file: "classpath:tickers/aliases.yml"

# Actuator endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# Scheduling Configuration
scheduling:
  rss-collection:
    cron: ${RSS_COLLECTION_CRON:0 */10 * * * *}  # Every 10 minutes
    enabled: ${RSS_COLLECTION_SCHEDULED:true}
  topic-clustering:
    cron: ${TOPIC_CLUSTERING_CRON:0 0 */6 * * *}  # Every 6 hours
    enabled: ${TOPIC_CLUSTERING_ENABLED:true}

# Resilience4j Configuration
resilience4j:
  retry:
    instances:
      rss-fetch:
        max-attempts: 3
        wait-duration: 2s
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - java.net.SocketTimeoutException
          - java.net.ConnectException
          - java.io.IOException

# Logging Configuration
logging:
  level:
    com.newsagent: ${LOG_LEVEL:INFO}
    org.springframework.web: ${WEB_LOG_LEVEL:INFO}
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# OpenAPI configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /docs
    operationsSorter: method